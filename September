//<----------------------------------------------DAY-1-03/09/24------------------------------------------------------------>
#53.MAXIMUM SUBARRAY LEETCODE
class Solution {
public:
    int maxSubArray(vector<int>& nums) {

    //       <--------------USING KADANE'S ALGO----------------->

    int n=nums.size();
    int sum=0;
    int max=INT_MIN;
    for(int i=0;i<n;i++){
        sum+=nums[i];
        if(sum>max) max=sum;
        if(sum<0) sum=0;
    }
    return max;
    }
};

//<------------------------------------------------DAY-2-04/09/24----------------------------------------------------------->
#11.Container with maximum water LEETCODE
class Solution {
public:
    int maxArea(vector<int>& height) {
//    <--------------USING TWO POINTER-------------->
   int i=0;
   int res=0;
   int j=height.size()-1;
   while(i<j){
   int area= (j-i)*min(height[i],height[j]);
   res=max(res,area);
   if(height[i]<height[j]) i++;
   else j--;
   }
   return res;
    }
};

//<-------------------------------------------------DAY-3-05/09/24--------------------------------------------------------->
#202.HAPPY NUMBER LEETCODE
class Solution {
public:
    bool isHappy(int n) {

     //***BOTH APPROACHES HAVE SAME TIME AND SPACE COMPLEXITY***

        // <------------------USING RECURSION------------------->
        // <---THIS IS OPTIMISED O(LOGN) AND O(1) TIME AND SPACE COMPLEXITY--->
        // if(n==4) return false;
        // if(n==1) return true;
        // int nextN=0;
        // int rem=0;
        // while(n>0){
        //      rem=n%10;
        //      nextN+=rem*rem;
        //     n/=10;
        // }
        // return isHappy(nextN);


    //    //<-----------FLOYD'S CYCLE DETECTION ALGO---------->
    //    //<<---ALSO CALLED TURTOISE OR HARE ALGO--->>

    //    int slow=n;
    //    int fast=findNext(n);
    //    while(fast!=1&& slow!=fast){
    //     slow=findNext(slow);
    //     fast=findNext(findNext(fast));
    //    }
    //    if(fast==1) return true;

    //    return false;
    // }
    // int findNext(int n){
    //     int rem=0;
    //     int nextN=0;
    //     while(n>0){
    //   rem=n%10;
    //   nextN+=rem*rem;
    //   n/=10;
    //     }
    //     return nextN;
    }
};

//<--------------------------------------------------DAY-4 06/09/24-------------------------------------------------------->
#1877.Minimize Maximum Pair Sum in array LEETCODE
class Solution {
public:
    int minPairSum(vector<int>& nums) {
        
        //<-----------------------USING SORTING------------------>

        sort(nums.begin(),nums.end());
        int i=0;
        int j=nums.size()-1;
        int maximum=-1;
        while(i<j){
          maximum=max(maximum,nums[i]+nums[j]);
            i++;
            j--;
        }
        return maximum;
    }
};

//<-----------------------------------------------------DAY-4-O7/09/24----------------------------------------------------->
496.Next Greater Element LEETCODE
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {

        //<------------------BRUTE FORCE ------------------->
    //     vector<int>vc;
    //    for(int i=0;i<nums1.size();i++){
    //     int k=-1;
    //     for(int j=0;j<nums2.size();j++){
    //         if(nums1[i]==nums2[j]){
    //             k=j;
    //             break;
    //         }
    //     }
    //     bool found=false;
    //     for(int j=k+1;j<nums2.size();j++){
    //         if(nums2[j]>nums2[k]){
    //          vc.push_back(nums2[j]);
    //          found=true;
    //          break;
    //         }
    //     }
    //     if(!found){
    //     vc.push_back(-1);
    //     }
    //    }
    //    return vc;

    //<----------------------USING STACK-------------------------->

    unordered_map<int,int>mp;
    stack<int>st;
    vector<int>vc;
    for(int i=nums2.size()-1;i>=0;i--){
        int currElement=nums2[i];
        while(!st.empty()&&st.top()<=currElement){
            st.pop();
        }
        int res=(st.empty())?-1:st.top();
      mp.insert({currElement,res});
      st.push(currElement);
    }
    for(auto i:nums1){
  vc.push_back(mp[i]);
    }
    return vc;
    }
};

503.Next Greater Element-2 LEETCODE
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& num) {
        
        //<------------------USING STACK--------------------->

    stack<int>st;
    int n=num.size();
    vector<int>vc(n,-1);
    for(int i=2*n-1;i>=0;i--){
       
        while(!st.empty()&&st.top()<=num[i%n]){
            st.pop();
        }
        if(i<n){
       vc[i]=(st.empty())?-1:st.top();
        }
      st.push(num[i%n]);
    }
   
    return vc;
    }
};

//<---------------------------------------------------DAY-5 08/09/24------------------------------------------------------>
238. Product of Array Except Self LEETCODE
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        //<-------------USING LEFT AND RIGHT ARRAY---------------->
        vector<int>left(nums.size(),1);
        vector<int>right(nums.size(),1);

        for(int i=1;i<nums.size();i++){
        left[i]=left[i-1]*nums[i-1];
        }

        for(int i=nums.size()-2;i>=0;i--){
            right[i]=right[i+1]*nums[i+1];
        }
        
        vector<int>res(nums.size());
        for(int i=0;i<nums.size();i++){
        res[i]=left[i]*right[i];
        }
        return res;
    }
};

13. Roman to Integer LEEETCODE
class Solution {
public:
    int romanToInt(string s) {
        map<char,int>mp;
        mp.insert({'I',1});
        mp.insert({'V',5});
        mp.insert({'X',10});
        mp.insert({'L',50});
        mp.insert({'C',100});
        mp.insert({'D',500});
        mp.insert({'M',1000});
        int ans=0;
        for(int i=0;i<s.size();i++){
            if(i==s.size()-1){
                ans+=mp[s[i]];
            }else if(mp[s[i]]>=mp[s[i+1]]){
                ans+=mp[s[i]];
            }else ans-=mp[s[i]];
        }         
        return ans;
    }
};

//<-----------------------------------------------DAY-6 09/09/24----------------------------------------------------------->
263.Ugly Number LEETCODE
class Solution {
public:
    bool isUgly(int n) {
        if(n<=0) return false;
        while(n%2==0) n/=2;
        while(n%3==0) n/=3;
        while(n%5==0) n/=5;

        return n==1;
    }
};

//<------------------------------------------------DAY-7 10/09/24---------------------------------------------------------->
1047. Remove All Adjacent Duplicates In String LEETCODE
class Solution {
public:
    string removeDuplicates(string s) {
        stack<char>st;
      int i=0;
      while(i<s.size()){
        if(st.empty()){
            st.push(s[i]);
        }
        else if(s[i]==st.top()){
          st.pop();
        }
        else{
            st.push(s[i]);
        }
        i++;
      }
      string res;
      while(!st.empty()){
      res=st.top()+res;
      st.pop();
      }
      return res;
    }
};

//<--------------------------------------------DAY-8 11/09/24--------------------------------------------------------------->
198.House Robber LEETCODE
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==1){
            return nums[0];
        }
        vector<int>dp(nums.size(),0);
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<nums.size();i++){
            dp[i]=max(dp[i-1],nums[i]+dp[i-2]);
        }
    return dp[nums.size()-1];
    }
};

//<--------------------------------------------DAY-9 14/09/24--------------------------------------------------------------->
860. Lemonade Change LEETCODE
class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        if(bills[0]!=5) return false;
        int count5=0,count10=0;
        for(int i=0;i<bills.size();i++){
            if(bills[i]==5) count5++;
            else if(bills[i]==10){
                if(count5>0){
                     count5--;
                }else return false;
                count10++;
            }else{
                if(count10>0&&count5>0){
                    count5--;
                    count10--;
                }else if(count5>=3){
                    count5-=3;
                } else{
                    return false;
                }
            }
        }
        return true;
    }
};

451. Sort Characters By Frequency LEETCODE
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int>mp;
        vector<pair<int,char>>vc;
        for(auto num:s){
            mp[num]++;
        }
        for(auto nums:mp){
            vc.push_back({nums.second,nums.first});
        }
        sort(vc.rbegin(),vc.rend());
        string ans;
        for(auto num:vc){
      ans.append(num.first,num.second);
        }
        return ans;
    }
};

205. Isomorphic Strings LEETCODE
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char,vector<int>>mp,mp1;
        for(int i=0;i<s.size();i++){
            mp[s[i]].push_back(i);
        } for(int i=0;i<t.size();i++){
            mp1[t[i]].push_back(i);
        }
        for(int i=0;i<s.size();i++){
            if(mp[s[i]]!=mp1[t[i]]){
                return false;
            }
        }
        return true;
    }
};

//<--------------------------------------------DAY-10 15/09/24--------------------------------------------------------------->
3254. Find the Power of K-Size Subarrays-I LEETCODE
class Solution {
public:
    vector<int> resultsArray(vector<int>& nums, int k) {
        
        vector<int>ans;
        for(int i=0;i<=nums.size()-k;i++){
           vector<int> arr(nums.begin() + i, nums.begin() + i + k);
            ans.push_back(check(arr));
        }
        return ans;
       
    }
    private:
    int check(vector<int>& arr){
        for(int i=1;i<arr.size();i++){
            if(arr[i]!=arr[i-1]+1){
                return -1;
            }
        }
       vector<int>sorted(arr);
        sort(sorted.begin(),sorted.end());
        if(arr!=sorted) return -1;

        return *max_element(arr.begin(),arr.end());

    }
};

//<--------------------------------------------DAY-11 16/09/24--------------------------------------------------------------->
264. Ugly Number II LEETCODE
class Solution {
public:
    int nthUglyNumber(int n) {
      int i=0,j=0,k=0;
      vector<int>res;
      res.push_back(1);
      while(res.size()<n){
        res.push_back(min(res[i]*2,min(res[j]*3,res[k]*5)));
        if(res.back()==res[i]*2) i++;
        if(res.back()==res[j]*3) j++;
        if(res.back()==res[k]*5) k++;
      }
      return res.back();
    }
};

//<--------------------------------------------DAY-12 17/09/24--------------------------------------------------------------->
383. Ransom Note LEETCODE
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        unordered_map<char,int>mp1,mp2;
        for(auto str:ransomNote){
            mp1[str]++;
        }
        for(auto str:magazine){
            mp2[str]++;
        }
        for(auto str:ransomNote){
            if(mp1[str]>mp2[str]){
                return false;
            }
        }
        return true;
    }
};
//<--------------------------------------------DAY-13 21/09/24--------------------------------------------------------------->
347. Top K Frequent Elements LEETCODE
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
       unordered_map<int,int>mp;
        for(auto num:nums){
            mp[num]++;
        }
        vector<int>res;
        priority_queue<pair<int,int>>pq;
        for(auto m:mp){
            pq.push({m.second,m.first});
        }
       while(!pq.empty()&&res.size()<k){
                res.push_back(pq.top().second);
                pq.pop();
        }
        return res;
    }
};
