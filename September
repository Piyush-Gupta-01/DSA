//<----------------------------------------------DAY-1-03/09/24------------------------------------------------------------>
#53.MAXIMUM SUBARRAY LEETCODE
class Solution {
public:
    int maxSubArray(vector<int>& nums) {

    //       <--------------USING KADANE'S ALGO----------------->

    int n=nums.size();
    int sum=0;
    int max=INT_MIN;
    for(int i=0;i<n;i++){
        sum+=nums[i];
        if(sum>max) max=sum;
        if(sum<0) sum=0;
    }
    return max;
    }
};

//<------------------------------------------------DAY-2-04/09/24----------------------------------------------------------->
#11.Container with maximum water LEETCODE
class Solution {
public:
    int maxArea(vector<int>& height) {
//    <--------------USING TWO POINTER-------------->
   int i=0;
   int res=0;
   int j=height.size()-1;
   while(i<j){
   int area= (j-i)*min(height[i],height[j]);
   res=max(res,area);
   if(height[i]<height[j]) i++;
   else j--;
   }
   return res;
    }
};

//<-------------------------------------------------DAY-3-04/09/24--------------------------------------------------------->



