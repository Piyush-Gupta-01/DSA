//<--------------------------------------------DAY-01 01/10/24--------------------------------------------------------------->
3194. Minimum Average of Smallest and Largest Elements LEETCODE.
class Solution {
public:
    double minimumAverage(vector<int>& nums){
        vector<double>averages;  //creating a answer vector named averages
        while(nums.size()>1){ //running while loop until its remove all the elements of nums 
            auto maxIter = max_element(nums.begin(),nums.end()); //as here before max_element there is no * so it will give a 
            auto minIter = min_element(nums.begin(),nums.end()); //iterator to max and min element.
            int minElement = *minIter; //here when we put * on that it will give an element of pointing iterator
            int maxElement = *maxIter; 
          //these if else lines are important as if we dont do this it after removing max element it will shift the position
          //and as all elements position was changed so if you try to remove min element after max that is wrong.
             if (maxIter > minIter) { //check which is greater that will come first
                nums.erase(maxIter);
                nums.erase(minIter);
            } else {
                nums.erase(minIter);
                nums.erase(maxIter);
            }
            double avg=(minElement+maxElement)/2.0; //store in double as it have floating output
            averages.push_back(avg);//push it on answer array
        }
        if(nums.size()==1) averages.push_back(nums[0]); //check if there is odd elements then 1 will remain so push it as it is.
        return *min_element(averages.begin(),averages.end()); //returning the min of averages.
    }
};

//<--------------------------------------------DAY-02 04/10/24--------------------------------------------------------------->
1046. Last Stone Weight LEETCODE
class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        priority_queue<int>pq;
        for(auto it:stones){
            pq.push(it);
        }
        while(pq.size()>1){
            int x=pq.top();
            pq.pop();
            int y=pq.top();
            pq.pop();
            int z=x-y;
            if(z>0){
                pq.push(z);
            }
        }
        if(pq.size()>0) return pq.top();
        else return 0;
    }
};

//<--------------------------------------------DAY-03 06/10/24--------------------------------------------------------------->
435. Non-overlapping Intervals leetCode
class Solution {
public:
    static bool cmp(vector<int>&a,vector<int>&b){
        return a[1]<b[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
       sort(intervals.begin(),intervals.end(),cmp);//this will sort according to end of intervals in increasing order by using the function cmp.
       int counter=1;
       int end=intervals[0][1];
       //for calculating total elemnts which are over lapping
       for(int i=0;i<intervals.size();i++){
        if(end<=intervals[i][0]){//cheking if end which is end of 1st interval <=current element's first
            counter++;
            end=intervals[i][1];//reinitialize new end which is current end's
        }
       }
       return intervals.size()-counter;//so by substracting overlapping to the size of interval we get non-over lapping elements
    }
};

//<--------------------------------------------DAY-03 06/10/24--------------------------------------------------------------->
2406. Divide Intervals Into Minimum Number of Groups
class Solution {
public:
    int minGroups(vector<vector<int>>& intervals) {
        /*
        1.firstly we will sort the intervals by their left.
        2.Use priority Queue(Min heap) of int
        3.Take a loop in which we have auto/reference variable which travels whole interval.
        4.While traversing everyTime we will store the current intervals left and right into start or end respectively.
        5.then check if queue is not empty and the top element is less than the current start.
        4.if condition is true we will pop the elements of queue.
        5.After that we will simply push the current end into the priorityQueue.
        6.At last we will simply return the size of the priority queue becoz it contains the total groups one-one elements which can determine the no. of groups.
        */

        sort(intervals.begin(),intervals.end());
        priority_queue<int, vector<int> ,greater<int>>pq;
        for(auto it:intervals) {
            int start=it[0],end=it[1];
            if(!pq.empty() && pq.top()<start){
                pq.pop();
            }
            pq.push(end);
        }
        return pq.size();
    }
};
